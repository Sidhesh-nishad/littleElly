---
export interface Props {
	title: string;
}
import "../global.css"
// import '../../node_modules/sal.js/dist/sal.css';
import "swiper/css";

import "swiper/css/navigation";
import "swiper/css/pagination";

const { title = 'Best CBSE School in Bangalore | Little Elly School' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<!-- <ViewTransitions /> -->

		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico">
		<!-- <link rel="stylesheet" href="node_modules/@glidejs/glide/dist/css/glide.core.min.css"> -->
		<meta name="generator" content={Astro.generator} />
		<title>Little Elly Preschool, Playschool, Kindergarten & Daycare</title>
		<!-- <meta name="description" content="Little Elly is affiliated to CBSE. It is ranked amongst the top CBSE schools in Bangalore. Enquire Now for AY 2024-25." /> -->
		
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=DM+Sans:opsz,wght@9..40,400;9..40,500;9..40,700&family=DM+Serif+Display:ital@0;1&display=swap" rel="stylesheet">
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Grandstander:ital,wght@0,100;0,200;0,300;0,400;0,600;0,700;0,800;0,900;1,100;1,400;1,500;1,700;1,800;1,900&display=swap" rel="stylesheet">
			<link 
			href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;500;600;700&display=swap"
			rel="stylesheet" 
			type="text/css"
			media="print"
			onload="this.media='all'" 
		/>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap" rel="stylesheet">

		<script async
			src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAW4mmhYRbPA2nPi-wzuJBPalXSuInbKks&loading=async&libraries=places&callback=initMap">
	</script>

		<!-- <l	ink rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" /> -->

		<!-- Google tag (gtag.js) -->
		<!-- <script async src="https://www.googletagmanager.com/gtag/js?id=G-SEL743GRSY"></script>
		<script>
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());

			gtag('config', 'G-SEL743GRSY');
		</script> -->
	</head>
	<body>
		<slot />

	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		/* font-family: system-ui, sans-serif; */
		background-color: #fff;
		scroll-behavior:smooth;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

</style>

<script>
  

	import { gsap } from "gsap";
      
  import { ScrollTrigger } from "gsap/ScrollTrigger";

	import Lenis from '@studio-freight/lenis'

	import Swiper from "swiper";
import { Autoplay, Pagination } from "swiper/modules"

Swiper.use([Autoplay, Pagination]);

// const testimonialSwiper = document.querySelector('.testimonial-swiper')

// const swiperWrapper = testimonialSwiper?.querySelector('.swiper-wrapper')

// // clone all slides and append to swiper-wrapper

// const slides = testimonialSwiper?.querySelectorAll('.swiper-slide')

// slides.forEach((slide) => {
//   const clone = slide.cloneNode(true)
//   swiperWrapper?.appendChild(clone)
// })

const swiper = new Swiper(".testimonial-swiper", {
  // Optional parameters
  direction: "horizontal",
  loop: true,
  slidesPerView: 1.25,
  centeredSlides: true,
  spaceBetween: 10,
  speed: 700,
  // pagination: {
  //   el: ".swiper-pagination-testimonial",
  //   clickable: true,
  // },
  autoplay: {
    delay: 3000,
    disableOnInteraction: false,
  },
});

const prevBtn = document.querySelector("[data-prev-swiper='testimonial-swiper']");
const nextBtn = document.querySelector("[data-next-swiper='testimonial-swiper']");

if (prevBtn) {
	prevBtn.addEventListener('click', () => {
		swiper.slidePrev()
	})
}

if (nextBtn) {
	nextBtn.addEventListener('click', () => {
		swiper.slideNext()
	})
}



	const lenis = new Lenis({
		duration: 0.6,
    // easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t))
	})

	lenis.on('scroll', ScrollTrigger.update)

	gsap.registerPlugin(ScrollTrigger);

	gsap.ticker.add((time)=>{
		lenis.raf(time * 1000)
	})

	gsap.ticker.lagSmoothing(0)


	const leftCloud = document.querySelector('[data-left-cloud]')
	const rightCloud = document.querySelector('[data-right-cloud]')

	leftCloud?.querySelectorAll('path').forEach((path, i) => {
		gsap.to(path, {
			x: -230,
			y: -230,
			duration: 0.7 + i * 0.2,
			delay: 0.1 + i * 0.1,
			
		});
	})
	rightCloud?.querySelectorAll('path').forEach((path, i) => {
		gsap.to(path, {
			x: 400,
			y: -230,
			duration: 0.7 + i * 0.2,
			delay: 0.1 + i * 0.1,
			
		});
	})

	const heroContainer = document.querySelector('[data-hero-container]')

	const heroTopAnimal = document.querySelectorAll('[data-hero-top-animal]')



	gsap.to(heroContainer, {
    scale: 0.9,
    opacity: 0,
    duration: 3,
    scrollTrigger: {
      trigger: '[data-parent="hero-student"]', 
			start: "0% 48%",
			end: "40% 20%",
      scrub: true,
    }
  });
	
	heroTopAnimal.forEach((animal, i) => {
		gsap.to(animal, {
			y: (20 + i * 80) * -1,
			scale: 0.8 + i * 0.3,
			opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: '[data-parent="hero-student"]', 
				start: "0% 48%",
				end: "40% 20%",
				scrub: true,
			}
		});
	})

	const dataClouds = document.querySelectorAll('[data-cloud]')

	dataClouds.forEach((cloud) => {
		const cloudIndex = Number(cloud.dataset.cloud)
		gsap.to(cloud, {
			x: cloudIndex === 1 ? -200 : 200,
			opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: document.querySelector('[data-parent="hero-container"]'), 
				start: "100% 50%",
				end: "140% 20%",
				scrub: true,
			}
		});
	})


	const appearElements = document.querySelectorAll('[data-appear]')
	

	appearElements.forEach(element => {
		if (element.dataset.appear === "false") return
		const order = element.dataset.appear || 0
		const trigger = element.dataset.trigger
			? document.querySelector(`[data-parent="${element.dataset.trigger}"]`) 
			: element

		let delay = element.dataset.delay || 0 + (0.1 * order)
		let y = element.dataset.y || 30 + (5 * order)
		let x = element.dataset.x || 0
		let opacity = element.dataset.opacity || 0
		const duration = element.dataset.t || 1
		gsap.fromTo(element, {
			opacity,
			y,
			x,
		}, {
			opacity: 1,
			y: 0,
			x: 0,
			delay,
			duration,
			scrollTrigger: {
				trigger, 
				start: "10% 80%",
				end: "100% 70%",
				// markers: true
			}
		});
	})

	const characterBG1  =  document.querySelector('[data-character-bg-1]')
	const characterBG2  =  document.querySelector('[data-character-bg-2]')
	const characterBG3  =  document.querySelector('[data-character-bg-3]')
	const characterBG4  =  document.querySelector('[data-character-bg-4]')

	gsap.from(characterBG1, {
		y: -80 * 2.2,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-character-trigger]', 
			start: "0% 100%",
			end: "100% 0%",
			scrub: true,
		}
	});
	const characters =  document.querySelectorAll('[data-character]')
	characters.forEach((character, i) => {
		gsap.from(character, {
		y: -80,
			duration: 3,
			scrollTrigger: {
				trigger: '[data-character-trigger]', 
				start: "0% 100%",
				end: "100% 0%",
				scrub: true,
			}
		});
	})
	gsap.from(characterBG2, {
		y: -100 * 2.5,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-character-trigger]', 
			start: "0% 100%",
			end: "100% 0%",
			scrub: true,
		}
	});
	gsap.from(characterBG3, {
		y: -90 * 4.2,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-character-trigger]', 
			start: "0% 100%",
			end: "100% 00%",
			scrub: true,
		}
	});
	gsap.from(characterBG4, {
		y: -80 * 7.5,
		duration: 3,
		scrollTrigger: {
			trigger: '[data-character-trigger]', 
			start: "0% 100%",
			end: "100% 0%",
			scrub: true,
		}
	});
	
	
	
	document.addEventListener("DOMContentLoaded", function() {
		initSwiper()
		initTicker()
  
	});
  
	function initSwiper() {
	//   const swiperData = JSON.parse(document.querySelectorAll(`.hero-swiper`))
	  
	  const swiperLine = document.querySelector('[swiper-line]')
	  const swiperLabel = document.querySelector('[swiper-label]')
  
	  const prevBtn = document.querySelectorAll('[data-prev="hero-swiper"]')
	  const nextBtn = document.querySelectorAll('[data-next="hero-swiper"]')
	  const swipers = document.querySelectorAll('.hero-swiper')
		if (!swipers || !prevBtn || !nextBtn) return
	  
	  swipers.forEach(item => {
		const swiper = new Swiper(item, {
		// Optional parameters
		modules: [Autoplay],
		direction: "horizontal",
		loop: true,
		effect: "coverflow",
		slidesPerView: 1.2,
		centeredSlides: true,
		spaceBetween: 10,
		speed: 700,
		autoplay: {
		  delay: 2000,
		  disableOnInteraction: false,
		},
	  });
	  swiper.on('transitionStart', () => {
		swiperLine.classList.add('hide-line')
		swiperLabel.classList.add('hide-text')
	  })
  
	  swiper.on('sliderMove', () => {
		swiperLine.classList.add('hide-line')
		swiperLabel.classList.add('hide-text')
	  })
	  swiper.on('transitionEnd', (e) => {
		// const labelText = swiperData[e.realIndex]?.text
		swiperLabel.innerText = "s"
		swiperLine.classList.remove('hide-line')
		swiperLabel.classList.remove('hide-text')
	  })
	  prevBtn.forEach(btn => {
		btn.addEventListener('click', () => {
			swiper.slidePrev()
	  	})
	  })
	  nextBtn.forEach(btn => {
		btn.addEventListener('click', () => {
			swiper.slideNext()
	  })
	  })
  
	  
	  })
	 
	  
	}
	
	
	function initTicker() {
	  const tickers = document.querySelectorAll('[data-ticker]');
	  console.log('tickers', tickers)
	  tickers.forEach(ticker => {

		const list = ticker.querySelector('.ticker__list');
		const clone = list.cloneNode(true);
		ticker.appendChild(clone);
		slider(ticker)
	  })
  
	  }
	  function slider(ticker){
		// const event = new CustomEvent('reinit-sliders');
		// document.dispatchEvent(event);
  
  
		let currentScroll = 0;
		const maxScroll = ticker.scrollWidth / 2;
		const scrollSpeed = 2;
		let isManualScrolling = false;
		let isCursorOverTicker = false;
		let scriptResetScroll = false;
		const tickerDir = ticker.dataset.dir
		if (tickerDir === 'right') {
			ticker.scrollLeft = maxScroll;
		}
		console.log(ticker.scrollLeft,"scrollLeft");
		function updateScroll() {
			if (isManualScrolling) {
				requestAnimationFrame(updateScroll);
				return;
			}


			if (tickerDir === 'right') {
				currentScroll -= scrollSpeed;
			} else {
				currentScroll += scrollSpeed;
			}

  
			if (currentScroll >= maxScroll) {
				scriptResetScroll = true;
				ticker.scrollLeft = 0;
				currentScroll = 0;
			} else {
				ticker.scrollLeft = currentScroll;
			}
  
			requestAnimationFrame(updateScroll);
		}
		updateScroll();
  
		  function handleManualScroll() {
			  if (scriptResetScroll) {
				  scriptResetScroll = false;
				  return;
			  }
  
			  const newScrollLeft = ticker.scrollLeft;
			  // console.log('newScrollLeft', newScrollLeft)
			  if (newScrollLeft <= 0) {
				  // User scrolled left past the start
				  scriptResetScroll = true;
				  ticker.scrollLeft = maxScroll;
				  currentScroll = maxScroll;
			  } else if (newScrollLeft >= maxScroll) {
				  // User scrolled right past the halfway point
				  scriptResetScroll = true;
				  ticker.scrollLeft = 0;
				  currentScroll = 0;
			  }
		  }
  
		  ticker.addEventListener('scroll', handleManualScroll);
  
		  ticker.addEventListener('mouseenter', () => {
			  isManualScrolling = true;
			  isCursorOverTicker = true;
		  });
  
		  ticker.addEventListener('touchstart', () => {
			isManualScrolling = true;
			isCursorOverTicker = true;
		  });
		  
		  ticker.addEventListener('mouseleave', () => {
			  isManualScrolling = false;
			  isCursorOverTicker = false;
			  currentScroll = ticker?.scrollLeft
		  });
  
		  ticker.addEventListener('touchend', () => {
			  isManualScrolling = false;
			  isCursorOverTicker = false;
			  currentScroll = ticker?.scrollLeft
		  });
		  ticker?.addEventListener('scrollend', () => {
			if (isManualScrolling && !isCursorOverTicker)  {
			  isManualScrolling = false;
			  currentScroll = ticker?.scrollLeft
			}
		  });
	  }

		const heroSectionBg = document.querySelector('[data-hero-section-bg]')
		const heroSectionStudent = document.querySelector('[data-hero-section-student]')

		gsap.to(heroSectionBg, {
			// y: (20 + i * 80) * -1,
			scale: 1.1,
			// opacity: 0,
			// opacity: 0,
			// y: 20,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true
			}
		});
		gsap.to(heroSectionStudent, {
			// y: (20 + i * 80) * -1,
			scale: 1.2,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true
			}
		});


		gsap.to('[data-hero-arya]', {
			scale: 1.1,
			y: -20,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true
			}
		})
		gsap.to('[data-hero-elephant]', {
			scale: 1.1,
			y: -20,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true,
			}
		})
		gsap.to('[data-baloon]', {
			scale: 1.1,
			y: -100,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true,
			}
		})
		gsap.to('[data-hero-elephant-heart]', {
			scale: 1.1,
			x: 20,
			y: -20,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true,
			}
		})
		gsap.to('[data-hero-elephant]', {
			scale: 1.1,
			y: -20,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true,
			}
		})
  
		gsap.to('[data-bottom-cloud]', {
			scale: 1.1,
			// opacity: 0,
			// opacity: 0,
			duration: 3,
			scrollTrigger: {
				trigger: heroSectionBg, 
				start: "100% 90%",
				end: "180% 40%",
				scrub: true,
			}
		})
  
  
  </script>