---
export interface Props {
	title: string;
}
import "../global.css"
import '../../node_modules/sal.js/dist/sal.css';
const { title = 'Best CBSE School in Bangalore | Little Elly School' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<!-- <ViewTransitions /> -->

		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico">
		<!-- <link rel="stylesheet" href="node_modules/@glidejs/glide/dist/css/glide.core.min.css"> -->
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="description" content="Little Elly Edify is affiliated to CBSE. It is ranked amongst the top CBSE schools in Bangalore. Enquire Now for AY 2024-25." />
		
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=DM+Sans:opsz,wght@9..40,400;9..40,500;9..40,700&family=DM+Serif+Display:ital@0;1&display=swap" rel="stylesheet">
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Grandstander:ital,wght@0,100;0,200;0,300;0,400;0,600;0,700;0,800;0,900;1,100;1,400;1,500;1,700;1,800;1,900&display=swap" rel="stylesheet">
			<link 
			href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;600;700&display=swap"
			rel="stylesheet" 
			type="text/css"
			media="print"
			onload="this.media='all'" 
		/>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap" rel="stylesheet">

		<!-- <l	ink rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" /> -->

		<!-- Google tag (gtag.js) -->
		<!-- <script async src="https://www.googletagmanager.com/gtag/js?id=G-SEL743GRSY"></script>
		<script>
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());

			gtag('config', 'G-SEL743GRSY');
		</script> -->
	</head>
	<body>
		<slot />

	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		/* font-family: system-ui, sans-serif; */
		background-color: #fff;
		scroll-behavior:smooth;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

</style>

<script>
  import sal from 'sal.js'

  sal();
	// const observer = new IntersectionObserver((entries) => {
	// 	entries.forEach(entry => {
	// 		const isIntersecting = (
	// 			entry.isIntersecting
	// 		) || entry.target.classList.contains('daisy-fixed')
	// 		if (isIntersecting) {
	// 			entry.target.classList.add('daisy-show')
	// 		}
	// 	})
	// }, {
	// 	root: document.querySelector("#scroll-area")
	// })

	// const hiddenElements = document.querySelectorAll('.daisy')
	// hiddenElements.forEach(element => {
	// 	observer.observe(element)
	// })
</script>
<script>
	import Swiper from "swiper";
  
	import { Autoplay } from "swiper/modules";
	
	
	document.addEventListener("DOMContentLoaded", function() {
		initSwiper()
		console.log('initSwiper')
		initTicker()
  
	});
  
	function initSwiper() {
	//   const swiperData = JSON.parse(document.querySelectorAll(`.hero-swiper`))
	  
	  const swiperLine = document.querySelector('[swiper-line]')
	  const swiperLabel = document.querySelector('[swiper-label]')
  
	  const prevBtn = document.querySelectorAll('[data-prev="hero-swiper"]')
	  const nextBtn = document.querySelectorAll('[data-next="hero-swiper"]')
	  const swipers = document.querySelectorAll('.hero-swiper')
	  swipers.forEach(item => {
		const swiper = new Swiper(item, {
		// Optional parameters
		modules: [Autoplay],
		direction: "horizontal",
		loop: true,
		effect: "coverflow",
		slidesPerView: 1.2,
		centeredSlides: true,
		spaceBetween: 10,
		speed: 700,
		autoplay: {
		  delay: 2000,
		  disableOnInteraction: false,
		},
	  });
	  swiper.on('transitionStart', () => {
		swiperLine.classList.add('hide-line')
		swiperLabel.classList.add('hide-text')
	  })
  
	  swiper.on('sliderMove', () => {
		swiperLine.classList.add('hide-line')
		swiperLabel.classList.add('hide-text')
	  })
	  swiper.on('transitionEnd', (e) => {
		// const labelText = swiperData[e.realIndex]?.text
		swiperLabel.innerText = "s"
		swiperLine.classList.remove('hide-line')
		swiperLabel.classList.remove('hide-text')
	  })
	  prevBtn.forEach(btn => {
		btn.addEventListener('click', () => {
			swiper.slidePrev()
	  	})
	  })
	  nextBtn.forEach(btn => {
		btn.addEventListener('click', () => {
			swiper.slideNext()
	  })
	  })
  
	  
	  })
	 
	  
	}
	
	
	function initTicker() {
	  const tickers = document.querySelectorAll('[data-ticker]');
	  console.log('tickers', tickers)
	  tickers.forEach(ticker => {

		const list = ticker.querySelector('.ticker__list');
		const clone = list.cloneNode(true);
		ticker.appendChild(clone);
		slider(ticker)
	  })
  
	  }
	  function slider(ticker){
		// const event = new CustomEvent('reinit-sliders');
		// document.dispatchEvent(event);
  
  
		let currentScroll = 0;
		const maxScroll = ticker.scrollWidth / 2;
		const scrollSpeed = 2;
		let isManualScrolling = false;
		let isCursorOverTicker = false;
		let scriptResetScroll = false;
		const tickerDir = ticker.dataset.dir
		if (tickerDir === 'right') {
			ticker.scrollLeft = maxScroll;
		}
		console.log(ticker.scrollLeft,"scrollLeft");
		function updateScroll() {
			if (isManualScrolling) {
				requestAnimationFrame(updateScroll);
				return;
			}


			if (tickerDir === 'right') {
				currentScroll -= scrollSpeed;
			} else {
				currentScroll += scrollSpeed;
			}

  
			if (currentScroll >= maxScroll) {
				scriptResetScroll = true;
				ticker.scrollLeft = 0;
				currentScroll = 0;
			} else {
				ticker.scrollLeft = currentScroll;
			}
  
			requestAnimationFrame(updateScroll);
		}
		updateScroll();
  
		  function handleManualScroll() {
			  if (scriptResetScroll) {
				  scriptResetScroll = false;
				  return;
			  }
  
			  const newScrollLeft = ticker.scrollLeft;
			  // console.log('newScrollLeft', newScrollLeft)
			  if (newScrollLeft <= 0) {
				  // User scrolled left past the start
				  scriptResetScroll = true;
				  ticker.scrollLeft = maxScroll;
				  currentScroll = maxScroll;
			  } else if (newScrollLeft >= maxScroll) {
				  // User scrolled right past the halfway point
				  scriptResetScroll = true;
				  ticker.scrollLeft = 0;
				  currentScroll = 0;
			  }
		  }
  
		  ticker.addEventListener('scroll', handleManualScroll);
  
		  ticker.addEventListener('mouseenter', () => {
			  isManualScrolling = true;
			  isCursorOverTicker = true;
		  });
  
		  ticker.addEventListener('touchstart', () => {
			isManualScrolling = true;
			isCursorOverTicker = true;
		  });
		  
		  ticker.addEventListener('mouseleave', () => {
			  isManualScrolling = false;
			  isCursorOverTicker = false;
			  currentScroll = ticker?.scrollLeft
		  });
  
		  ticker.addEventListener('touchend', () => {
			  isManualScrolling = false;
			  isCursorOverTicker = false;
			  currentScroll = ticker?.scrollLeft
		  });
		  ticker?.addEventListener('scrollend', () => {
			if (isManualScrolling && !isCursorOverTicker)  {
			  isManualScrolling = false;
			  currentScroll = ticker?.scrollLeft
			}
		  });
	  }
  
  
  </script>