---
import Modal from "./system/Modal.astro";
import Text from "./system/Text.astro";
import arrow from '../icons/arrow.svg';
import Ticker from "./Ticker.astro";
import Gallery1 from "../image/register/gallery/1.png";
import Gallery2 from "../image/register/gallery/2.png";
import Gallery3 from "../image/register/gallery/3.png";
import Gallery4 from "../image/register/gallery/4.png";
import Section from "./system/Section.astro";
import { Image } from "astro:assets";
import HeartIllustration from "../image/decorations/heart.png";
import RainbowIllustration from "../image/decorations/rainbow.png";

const { id, gallery, currentLink, link, closeLink } = Astro.props
const slideId = 'slide' + id

---
<Section class="!px-0 justify-center flex flex-col">
  <div class="flex justify-between w-full px-[100px]">
    <Image src={RainbowIllustration} class="w-[90px] h-[70px]" alt="rainbow" />
    <Text type="h2" class="text-primary text-center">
      Gallery
      <br />
      <span class="mt-[40px]">
        <svg  width="100%" height="13" viewBox="0 0 212 13" fill="none">
          <path d="M2.00004 6.4333C5.64529 12.4339 9.29441 12.4363 12.9474 6.44037C16.6004 0.444443 20.2495 0.446799 23.8948 6.44743C27.54 12.4481 31.1891 12.4504 34.8421 6.4545C38.4951 0.458576 42.1442 0.460931 45.7895 6.46156C49.4347 12.4622 53.0839 12.4646 56.7369 6.46863C60.3899 0.472708 64.039 0.475064 67.6842 6.4757C71.3295 12.4763 74.9786 12.4787 78.6316 6.48276C82.2846 0.486841 85.9337 0.489196 89.579 6.48983C93.2242 12.4905 96.8733 12.4928 100.526 6.49689C104.179 0.500973 107.828 0.503328 111.474 6.50396C115.119 12.5046 118.768 12.5069 122.421 6.51103C126.074 0.515106 129.723 0.517461 133.368 6.51809C137.014 12.5187 140.663 12.5211 144.316 6.52516C147.969 0.529238 151.618 0.531593 155.263 6.53223C158.908 12.5329 162.558 12.5352 166.211 6.53929C169.864 0.54337 173.513 0.545726 177.158 6.54636C180.803 12.547 184.452 12.5493 188.105 6.55342C191.758 0.557503 195.407 0.559858 199.053 6.56049C202.698 12.5611 206.347 12.5635 210 6.56756" stroke="#FAC4AD" stroke-width="2.4365"/>
          </svg>
      </span>
    </Text>
    <Image src={HeartIllustration} class="w-[92px] h-[100px]" alt="heart" />

  </div>
  <Ticker 
    id="gallery-1"
    items={[
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
    ]}
  />
  <Ticker 
  id="gallery-1"
  dir="right"
  items={[
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
  ]}
/>
</Section>




<style>
  .gallery-hidden {
    /* transform: translateY(100vh); */
    opacity: 0;
    pointer-events: none;
  }
</style>


<script>

  const prevButtonsSlides = document.querySelectorAll<HTMLElement>('[data-slide-pb]')
  const nextButtonsSlides = document.querySelectorAll<HTMLElement>('[data-slide-nb]')


  const goToPrevSlide = slideId => {
    const captionText = document.querySelector<HTMLElement>(`[data-caption-id="${slideId}"][data-slides-captions]`)

    const descriptionText = document.querySelectorAll<HTMLElement>(`[data-description-id="${slideId}"]`)
  
    const allCaptions = captionText.dataset.slidesCaptions.split(',')
    

    const allSlides = document.querySelectorAll<HTMLElement>(`[data-target-slide="${slideId}"]`)
    const allSlidesLength = allSlides.length
    const activeSlide = [...allSlides].find(slide => slide.dataset.isActive === 'true')

    const activeSlideIndex = parseInt(activeSlide.dataset.targetSlideI)
    const prevSlideIndex = activeSlideIndex === 0 ? allSlidesLength - 1 : activeSlideIndex - 1
    const prevSlide = document.querySelector<HTMLElement>(`[data-target-slide="${slideId}"][data-target-slide-i="${prevSlideIndex}"]`)
    
    const newCaption = allCaptions[prevSlideIndex]
    captionText.innerText = newCaption

    if (descriptionText) {
      descriptionText.forEach((description, index) => {
        const allDescriptions = description.dataset.slidesDescription.split('___')
        description.innerText = allDescriptions[prevSlideIndex]
      })
    }


    activeSlide.dataset.isActive = 'false'
    prevSlide.dataset.isActive = 'true'
  }

  const goToNextSlide = slideId => {
    const captionText = document.querySelector<HTMLElement>(`[data-caption-id="${slideId}"][data-slides-captions]`)
    const descriptionText = document.querySelectorAll<HTMLElement>(`[data-description-id="${slideId}"]`)

    const allCaptions = captionText.dataset.slidesCaptions.split(',')

    const allSlides = document.querySelectorAll<HTMLElement>(`[data-target-slide="${slideId}"]`)
    const allSlidesLength = allSlides.length
    const activeSlide = [...allSlides].find(slide => slide.dataset.isActive === 'true')
    const activeSlideIndex = parseInt(activeSlide.dataset.targetSlideI)

    const nextSlideIndex = activeSlideIndex === allSlidesLength - 1 ? 0 : activeSlideIndex + 1
    const nextSlide = document.querySelector<HTMLElement>(`[data-target-slide="${slideId}"][data-target-slide-i="${nextSlideIndex}"]`)
      
    const newCaption = allCaptions[nextSlideIndex]
    captionText.innerText = newCaption

    if (descriptionText) {
      descriptionText.forEach((description, index) => {
        const allDescriptions = description.dataset.slidesDescription.split('___')
        description.innerText = allDescriptions[nextSlideIndex]
      })
    }

    activeSlide.dataset.isActive = 'false'
    nextSlide.dataset.isActive = 'true'
  }

  prevButtonsSlides.forEach(prevButton => {
    prevButton.addEventListener('click', () => {
      goToPrevSlide(prevButton.dataset.targetSlideid)
    })
  })

  nextButtonsSlides.forEach(nextButton => {
    nextButton.addEventListener('click', () => {

      goToNextSlide(nextButton.dataset.targetSlideid)
    })
  })

  document.addEventListener('keydown', e => {
    const allModals = document.querySelectorAll<HTMLElement>('[data-modal-id]')
    const modal = [...allModals].find(modal => !modal.classList.contains('modal-hidden'))
    if (modal) {
      const slideId = 'slide' + modal.dataset.modalId

      if (e.key === 'ArrowLeft') {
        goToPrevSlide(slideId)
      }
      if (e.key === 'ArrowRight') {
        goToNextSlide(slideId)
      }
    }
  })

</script>
