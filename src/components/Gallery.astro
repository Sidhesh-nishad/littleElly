---
import Modal from "./system/Modal.astro";
import Text from "./system/Text.astro";
import arrow from '../icons/arrow.svg';
import Ticker from "./Ticker.astro";
import Gallery1 from "../image/register/gallery/1.png";
import Gallery2 from "../image/register/gallery/2.png";
import Gallery3 from "../image/register/gallery/3.png";
import Gallery4 from "../image/register/gallery/4.png";
import Section from "./system/Section.astro";
import { Image } from "astro:assets";
import HeartIllustration from "../image/decorations/heart.png";
import RainbowIllustration from "../image/decorations/rainbow.png";

const { id, gallery, currentLink, link, closeLink } = Astro.props
const slideId = 'slide' + id

---
<Section class="!px-0 justify-center flex flex-col gap-l">
  <div class="flex justify-between w-full px-[100px]">
    <Image src={RainbowIllustration} class="w-[90px] h-[70px]" alt="rainbow" />
    <Text type="h2" class="text-primary text-center">
      Gallery
    </Text>
    <Image src={HeartIllustration} class="w-[92px] h-[100px]" alt="heart" />

  </div>
  <Ticker 
    id="gallery-1"
    items={[
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
      {
        type: 'image',
        src: Gallery1,
        background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
        borderColor: 'rgba(141, 134, 239, 0.40)',
        alt: "SOCIAL MEDIA",
        class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
      },
    ]}
  />
  <Ticker 
  id="gallery-1"
  items={[
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
    {
      type: 'image',
      src: Gallery1,
      background: "linear-gradient(0deg, #E8F5FF 0%, #E8F5FF 100%)",
      borderColor: 'rgba(141, 134, 239, 0.40)',
      alt: "SOCIAL MEDIA",
      class: "rounded-[30px] border-[3.4px] border-dashed border-primary bg-[white] p-[14px] bg-white"
    },
  ]}
/>
</Section>




<style>
  .gallery-hidden {
    /* transform: translateY(100vh); */
    opacity: 0;
    pointer-events: none;
  }
</style>


<script>

  const prevButtonsSlides = document.querySelectorAll<HTMLElement>('[data-slide-pb]')
  const nextButtonsSlides = document.querySelectorAll<HTMLElement>('[data-slide-nb]')


  const goToPrevSlide = slideId => {
    const captionText = document.querySelector<HTMLElement>(`[data-caption-id="${slideId}"][data-slides-captions]`)

    const descriptionText = document.querySelectorAll<HTMLElement>(`[data-description-id="${slideId}"]`)
  
    const allCaptions = captionText.dataset.slidesCaptions.split(',')
    

    const allSlides = document.querySelectorAll<HTMLElement>(`[data-target-slide="${slideId}"]`)
    const allSlidesLength = allSlides.length
    const activeSlide = [...allSlides].find(slide => slide.dataset.isActive === 'true')

    const activeSlideIndex = parseInt(activeSlide.dataset.targetSlideI)
    const prevSlideIndex = activeSlideIndex === 0 ? allSlidesLength - 1 : activeSlideIndex - 1
    const prevSlide = document.querySelector<HTMLElement>(`[data-target-slide="${slideId}"][data-target-slide-i="${prevSlideIndex}"]`)
    
    const newCaption = allCaptions[prevSlideIndex]
    captionText.innerText = newCaption

    if (descriptionText) {
      descriptionText.forEach((description, index) => {
        const allDescriptions = description.dataset.slidesDescription.split('___')
        description.innerText = allDescriptions[prevSlideIndex]
      })
    }


    activeSlide.dataset.isActive = 'false'
    prevSlide.dataset.isActive = 'true'
  }

  const goToNextSlide = slideId => {
    const captionText = document.querySelector<HTMLElement>(`[data-caption-id="${slideId}"][data-slides-captions]`)
    const descriptionText = document.querySelectorAll<HTMLElement>(`[data-description-id="${slideId}"]`)

    const allCaptions = captionText.dataset.slidesCaptions.split(',')

    const allSlides = document.querySelectorAll<HTMLElement>(`[data-target-slide="${slideId}"]`)
    const allSlidesLength = allSlides.length
    const activeSlide = [...allSlides].find(slide => slide.dataset.isActive === 'true')
    const activeSlideIndex = parseInt(activeSlide.dataset.targetSlideI)

    const nextSlideIndex = activeSlideIndex === allSlidesLength - 1 ? 0 : activeSlideIndex + 1
    const nextSlide = document.querySelector<HTMLElement>(`[data-target-slide="${slideId}"][data-target-slide-i="${nextSlideIndex}"]`)
      
    const newCaption = allCaptions[nextSlideIndex]
    captionText.innerText = newCaption

    if (descriptionText) {
      descriptionText.forEach((description, index) => {
        const allDescriptions = description.dataset.slidesDescription.split('___')
        description.innerText = allDescriptions[nextSlideIndex]
      })
    }

    activeSlide.dataset.isActive = 'false'
    nextSlide.dataset.isActive = 'true'
  }

  prevButtonsSlides.forEach(prevButton => {
    prevButton.addEventListener('click', () => {
      goToPrevSlide(prevButton.dataset.targetSlideid)
    })
  })

  nextButtonsSlides.forEach(nextButton => {
    nextButton.addEventListener('click', () => {

      goToNextSlide(nextButton.dataset.targetSlideid)
    })
  })

  document.addEventListener('keydown', e => {
    const allModals = document.querySelectorAll<HTMLElement>('[data-modal-id]')
    const modal = [...allModals].find(modal => !modal.classList.contains('modal-hidden'))
    if (modal) {
      const slideId = 'slide' + modal.dataset.modalId

      if (e.key === 'ArrowLeft') {
        goToPrevSlide(slideId)
      }
      if (e.key === 'ArrowRight') {
        goToNextSlide(slideId)
      }
    }
  })

</script>
